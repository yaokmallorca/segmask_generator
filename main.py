import os
from resize import *
import sys  
sys.path.append('/home/yaok/software/dataset/seg_mask_generate/')

DATA_DIR = "imgs/"
JSON_DIR = "json/"


def resize_ImgsLabels(resize_w, resize_h, IMG_IN_PATH, IMG_OUT_PATH, 
						JSON_IN_PATH, JSON_OUT_PATH):
	img_list = os.listdir(DATA_DIR)
	for filename in img_list:
		if filename.endswith("jpg"):
			print filename
			convert_img(resize_w, resize_h, IMG_IN_PATH+filename[0:-4], 
						IMG_OUT_PATH+filename[0:-4])
			convert_json(resize_w, resize_h, JSON_IN_PATH, JSON_OUT_PATH, 
						IMG_IN_PATH, IMG_OUT_PATH, filename[0:-4])

def main():
	# 1 resize img and corespornding json file
	# for fcn, input size 500x500
	print "stage 1"
	new_w = 500
	new_h = 500
	if not os.path.exists("resize_imgs/"):
		os.mkdir("resize_imgs/")
	if not os.path.exists("resize_labels/"):
		os.mkdir("resize_labels/")
	resize_ImgsLabels(new_w, new_h, "imgs/", "resize_imgs/", "json/", "resize_labels/")

	print "stage 2"
	# 2 use labelme to generate segmask
	from subprocess import call
	for root, dirs, files in os.walk("resize_labels/"):
		for name in files:
			if name.endswith('json'):
				name = "resize_labels/" + name
				call(['labelme_json_to_dataset', name])
				print "#####################################"


	# 3 copy and rename segmask generated by labelme
	print "stage 3"
	import shutil
	if not os.path.exists("labels/"):
		os.mkdir("labels/")
	for root, dirs, files in os.walk("resize_labels/"):
		for f_dir in dirs:
			src_f = "resize_labels/" + f_dir + "/label.png"
			dst_f = "labels/" + f_dir[0:-5] + ".png"
			shutil.copy(src_f, dst_f)

	# 4. generate color segmask 
	print "stage 4"
	import PIL.Image
	import numpy as np
	import colorlabel
	from skimage import io, data, color
	COLORS = ([0.502,   0,   0], [  0, 0.502,   0], [0.502, 0.502,   0], [  0,   0, 0.502])
	if not os.path.exists("labels_rgb/"):
		os.mkdir("labels_rgb/")
	for root, dirs, names in os.walk("labels"):
		for pic_name in names:
			if pic_name.endswith('png'):
				print pic_name
				img = PIL.Image.open("labels/" + pic_name)
				label = np.array(img)
				dst = colorlabel.label2rgb(label, bg_label=0, bg_color=(0,0,0), colors=COLORS)
				io.imsave('labels_rgb/' + pic_name, dst)
				print "####################################"

	# 5, convert rgb_label to index label
	if not os.path.exists("labels_ind/"):
		os.mkdir("labels_ind/")
	for root, dirs, gts in os.walk('labels_rgb/'):
		for gt in gts:
			if gt.endswith('png'):
				img = Image.open('labels_rgb/' + gt).convert("L")
				img.putpalette([0, 		0, 		0, # index 0
								128,	0,		0, # index 1
								0,		128,	0, # index 2
								128,	128,	0, # index 3
								0,		0,		0])# index 4
				gray_img = np.array(img)
				gray_img[gray_img == 14] = 4
				gray_img[gray_img == 38] = 1
				gray_img[gray_img == 75] = 2
				gray_img[gray_img == 113] = 3
				io.imsave('labels_ind/' + gt[0:-4] + '.bmp', gray_img)

	# delete imgs, json, resize_labels, labels
	if os.path.exists("imgs/"):
		shutil.rmtree('imgs/')
	if os.path.exists("json/"):
		shutil.rmtree('json/')
	if os.path.exists("resize_labels/"):
		shutil.rmtree('resize_labels/')
	if os.path.exists("labels/"):
		shutil.rmtree('labels/')

if __name__ == '__main__':
	main()



